package main

import "fmt"

func main() {
	/*
		位运算：就是将数值转换为二进制，按位操作
			按位与（&）：对应位的值都是1才是1，有一个0就是0
			按位或（|）：对应位的值都是0才是0，有一个是1就是1
			异或（^）
				一元：^a
					按位取反，0->1，1->0
				二元：a^b
					对应位的值，不相同为1，相同为0
			位清空（&^）
				对于a &^ b
					主要是针对b上的数值
					如果为0，则取a对应位上的数值
					如果为1，则结果位就取0
			<<：表示左移，例如，4 << 2这表示4的二进制数值向左移2位
			>>：表示右移，例如，4 >> 3这表示4的二进制数值向右移3位

		二进制转换
			0    0  0  0 0 0 0 0
			128 64 32 16 8 4 2 1
	*/
	a := 60 // 0011 1100
	b := 13 // 0000 1101
	c := 15

	res1 := a & b
	// a&b 结果：0000 1100 转成二进制就是12

	fmt.Printf("a & b = %d\n", res1) // 12

	res2 := a | b
	// a | b 结果：0011 1101 转成二进制就是61

	fmt.Printf("a | b = %d\n", res2) // 61

	res3 := ^b
	// a 0011 1100
	// - 0011 1101
	// ^a 1100 0011

	fmt.Printf("^a = %d\n", res3) // 195

	fmt.Println(^c)

	re4 := a ^ b
	// a ^b 结果：0011 0001

	fmt.Printf("a ^ b = %d\n", re4) // 49

	d := 4

	res5 := d << 2 // 表示d变量的数值的二进制数据左移两位
	// 0000 0100 = 4
	// 0001 0000 = 16
	fmt.Println(res5)

	fmt.Println(4 >> 1)
}
